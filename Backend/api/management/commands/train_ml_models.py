from django.core.management.base import BaseCommand
from api.ml_service import ml_service
import logging

logger = logging.getLogger(__name__)

class Command(BaseCommand):
    help = 'Entrenar modelos de machine learning para predicciones s√≠smicas'

    def add_arguments(self, parser):
        parser.add_argument(
            '--country',
            type=str,
            help='Pa√≠s espec√≠fico para entrenar (opcional)',
        )
        parser.add_argument(
            '--force',
            action='store_true',
            help='Forzar reentrenamiento de modelos existentes',
        )

    def handle(self, *args, **options):
        country = options.get('country')
        force = options.get('force', False)
        
        self.stdout.write(
            self.style.SUCCESS(f'Iniciando entrenamiento de modelos ML...')
        )
        
        if country:
            self.stdout.write(f'Entrenando modelos para: {country}')
        else:
            self.stdout.write('Entrenando modelos globales')
        
        try:
            # Entrenar modelos
            success = ml_service.train_models(country_code=country)
            
            if success:
                self.stdout.write(
                    self.style.SUCCESS(
                        f'‚úÖ Modelos entrenados exitosamente para {country or "todos los pa√≠ses"}'
                    )
                )
                
                # Mostrar informaci√≥n de los modelos
                self.stdout.write('\nüìä Informaci√≥n de los modelos:')
                self.stdout.write(f'  - Clasificador de riesgo: {"‚úÖ" if ml_service.models["risk_classifier"] else "‚ùå"}')
                self.stdout.write(f'  - Regresor de magnitud: {"‚úÖ" if ml_service.models["magnitude_regressor"] else "‚ùå"}')
                self.stdout.write(f'  - Regresor de frecuencia: {"‚úÖ" if ml_service.models["frequency_regressor"] else "‚ùå"}')
                self.stdout.write(f'  - Escalador: {"‚úÖ" if ml_service.scaler else "‚ùå"}')
                
            else:
                self.stdout.write(
                    self.style.ERROR('‚ùå Error al entrenar los modelos')
                )
                
        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f'‚ùå Error durante el entrenamiento: {str(e)}')
            )
            logger.error(f"Error training models: {str(e)}")
